package com.barmanagement.util;

import com.barmanagement.model.Order;
import com.barmanagement.model.OrderItem;
import com.barmanagement.model.MenuItem;
import com.barmanagement.dao.MenuItemDAO;

import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.*;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;

/**
 * Invoice Generator - T·∫°o PDF h√≥a ƒë∆°n ƒë·∫πp v·ªõi font ch·ªØ ti·∫øng Vi·ªát
 */
public class InvoiceGenerator {
    
    private final NumberFormat currencyFormatter = NumberFormat.getInstance(Locale.forLanguageTag("vi-VN"));
    private final SimpleDateFormat dateFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    
    public InvoiceGenerator() {
        currencyFormatter.setMaximumFractionDigits(0);
    }
    
    /**
     * T·∫°o file PDF h√≥a ƒë∆°n m√† kh√¥ng t·ª± ƒë·ªông m·ªü
     */
    public File generateInvoice(Order order, List<OrderItem> orderItems) {
        if (order == null || orderItems == null || orderItems.isEmpty()) {
            System.err.println("‚ùå L·ªói: Order ho·∫∑c OrderItems kh√¥ng h·ª£p l·ªá");
            return null;
        }
        
        try {
            // T·∫°o file PDF v·ªõi t√™n c·ªë ƒë·ªãnh trong th∆∞ m·ª•c Documents
            File invoiceFile = createInvoiceFile(order.getId());
            
            // T·∫°o PDF
            generateInvoicePDF(order, orderItems, invoiceFile.getAbsolutePath());
            
            System.out.println("‚úÖ ƒê√£ t·∫°o h√≥a ƒë∆°n PDF: " + invoiceFile.getAbsolutePath());
            return invoiceFile;
            
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói t·∫°o file PDF: " + e.getMessage());
            e.printStackTrace();
            return null;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o h√≥a ƒë∆°n: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * T·∫°o v√† m·ªü file PDF h√≥a ƒë∆°n
     */
    public void generateAndOpenInvoice(Order order, List<OrderItem> orderItems) {
        if (order == null || orderItems == null || orderItems.isEmpty()) {
            System.err.println("‚ùå L·ªói: Order ho·∫∑c OrderItems kh√¥ng h·ª£p l·ªá");
            return;
        }
        
        try {
            // T·∫°o file PDF v·ªõi t√™n c·ªë ƒë·ªãnh trong th∆∞ m·ª•c Documents
            File invoiceFile = createInvoiceFile(order.getId());
            
            // T·∫°o PDF
            generateInvoicePDF(order, orderItems, invoiceFile.getAbsolutePath());
            
            // Th·ª≠ m·ªü file PDF v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
            boolean opened = tryOpenPDF(invoiceFile);
            
            if (opened) {
                System.out.println("‚úÖ ƒê√£ t·∫°o v√† m·ªü h√≥a ƒë∆°n PDF: " + invoiceFile.getName());
            } else {
                System.out.println("‚úÖ ƒê√£ t·∫°o h√≥a ƒë∆°n PDF: " + invoiceFile.getAbsolutePath());
                System.out.println("üìÅ Vui l√≤ng m·ªü file th·ªß c√¥ng t·ª´: " + invoiceFile.getParent());
            }
            
        } catch (IOException e) {
            System.err.println("‚ùå L·ªói t·∫°o file PDF: " + e.getMessage());
            e.printStackTrace();
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói t·∫°o h√≥a ƒë∆°n: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * T·∫°o file h√≥a ƒë∆°n v·ªõi ƒë∆∞·ªùng d·∫´n c·ªë ƒë·ªãnh
     */
    private File createInvoiceFile(int orderId) throws IOException {
        // T·∫°o th∆∞ m·ª•c Documents/BarManager/Invoices n·∫øu ch∆∞a c√≥
        File documentsDir = new File(System.getProperty("user.home"), "Documents");
        File barManagerDir = new File(documentsDir, "BarManager");
        File invoicesDir = new File(barManagerDir, "Invoices");
        
        if (!invoicesDir.exists()) {
            invoicesDir.mkdirs();
        }
        
        // T·∫°o t√™n file v·ªõi timestamp
        String timestamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new java.util.Date());
        String fileName = String.format("HoaDon_Order%d_%s.pdf", orderId, timestamp);
        
        return new File(invoicesDir, fileName);
    }
    
    /**
     * Th·ª≠ m·ªü file PDF v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
     */
    private boolean tryOpenPDF(File pdfFile) {
        // Ph∆∞∆°ng ph√°p 1: Desktop API
        if (Desktop.isDesktopSupported()) {
            try {
                Desktop desktop = Desktop.getDesktop();
                if (desktop.isSupported(Desktop.Action.OPEN)) {
                    desktop.open(pdfFile);
                    return true;
                }
            } catch (Exception e) {
                System.err.println("Kh√¥ng th·ªÉ m·ªü PDF b·∫±ng Desktop API: " + e.getMessage());
            }
        }
        
        // Ph∆∞∆°ng ph√°p 2: Runtime exec (Windows)
        if (System.getProperty("os.name").toLowerCase().contains("windows")) {
            try {
                Runtime.getRuntime().exec("cmd /c start \"\" \"" + pdfFile.getAbsolutePath() + "\"");
                return true;
            } catch (Exception e) {
                System.err.println("Kh√¥ng th·ªÉ m·ªü PDF b·∫±ng Windows command: " + e.getMessage());
            }
        }
        
        // Ph∆∞∆°ng ph√°p 3: Runtime exec (macOS)
        if (System.getProperty("os.name").toLowerCase().contains("mac")) {
            try {
                Runtime.getRuntime().exec("open \"" + pdfFile.getAbsolutePath() + "\"");
                return true;
            } catch (Exception e) {
                System.err.println("Kh√¥ng th·ªÉ m·ªü PDF b·∫±ng macOS command: " + e.getMessage());
            }
        }
        
        // Ph∆∞∆°ng ph√°p 4: Runtime exec (Linux)
        if (System.getProperty("os.name").toLowerCase().contains("linux")) {
            try {
                Runtime.getRuntime().exec("xdg-open \"" + pdfFile.getAbsolutePath() + "\"");
                return true;
            } catch (Exception e) {
                System.err.println("Kh√¥ng th·ªÉ m·ªü PDF b·∫±ng Linux command: " + e.getMessage());
            }
        }
        
        return false;
    }
    
    /**
     * T·∫°o file PDF h√≥a ƒë∆°n
     */
    private void generateInvoicePDF(Order order, List<OrderItem> orderItems, String filePath) throws IOException {
        PdfWriter writer = new PdfWriter(filePath);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);
        
        // Thi·∫øt l·∫≠p font - s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh v·ªõi encoding UTF-8
        PdfFont font = PdfFontFactory.createFont(com.itextpdf.io.font.constants.StandardFonts.HELVETICA, "UTF-8");
        PdfFont boldFont = PdfFontFactory.createFont(com.itextpdf.io.font.constants.StandardFonts.HELVETICA_BOLD, "UTF-8");
        
        // Header - Logo v√† t√™n bar
        Paragraph title = new Paragraph("BAR MANAGER")
                .setFont(boldFont)
                .setFontSize(24)
                .setTextAlignment(TextAlignment.CENTER)
                .setMarginBottom(5);
        
        Paragraph subtitle = new Paragraph("HOA DON THANH TOAN")
                .setFont(boldFont)
                .setFontSize(18)
                .setTextAlignment(TextAlignment.CENTER)
                .setMarginBottom(20);
        
        document.add(title);
        document.add(subtitle);
        
        // Th√¥ng tin ƒë∆°n h√†ng
        Table infoTable = new Table(UnitValue.createPercentArray(new float[]{1, 1}));
        infoTable.setWidth(UnitValue.createPercentValue(100));
        infoTable.setMarginBottom(20);
        
        // Th√¥ng tin b√™n tr√°i
        Cell leftCell = new Cell();
        leftCell.add(new Paragraph("Don hang: #" + order.getId())
                .setFont(boldFont)
                .setFontSize(12));
        leftCell.add(new Paragraph("Ban: " + order.getTableId())
                .setFont(font)
                .setFontSize(11)
                .setMarginTop(5));
        leftCell.add(new Paragraph("Thoi gian: " + dateFormatter.format(order.getOrderTime()))
                .setFont(font)
                .setFontSize(11)
                .setMarginTop(5));
        
        // Th√¥ng tin b√™n ph·∫£i
        Cell rightCell = new Cell();
        rightCell.add(new Paragraph("Tong tien:")
                .setFont(boldFont)
                .setFontSize(12));
        rightCell.add(new Paragraph(formatCurrency(order.getTotalAmount()))
                .setFont(boldFont)
                .setFontSize(16)
                .setMarginTop(5));
        rightCell.add(new Paragraph("Trang thai: " + getStatusText(order.getStatus()))
                .setFont(font)
                .setFontSize(11)
                .setMarginTop(5));
        
        infoTable.addCell(leftCell);
        infoTable.addCell(rightCell);
        document.add(infoTable);
        
        // ƒê∆∞·ªùng k·∫ª ngang
        LineSeparator separator = new LineSeparator(new com.itextpdf.kernel.pdf.canvas.draw.SolidLine());
        document.add(separator);
        document.add(new Paragraph(" ").setMarginBottom(10));
        
        // Chi ti·∫øt m√≥n ƒÉn
        Paragraph itemsTitle = new Paragraph("CHI TIET MON AN:")
                .setFont(boldFont)
                .setFontSize(14)
                .setMarginBottom(10);
        document.add(itemsTitle);
        
        // B·∫£ng chi ti·∫øt m√≥n ƒÉn
        Table itemsTable = new Table(UnitValue.createPercentArray(new float[]{3, 1, 2, 2}));
        itemsTable.setWidth(UnitValue.createPercentValue(100));
        itemsTable.setMarginBottom(20);
        
        // Header c·ªßa b·∫£ng
        Cell headerCell1 = new Cell().add(new Paragraph("Ten mon").setFont(boldFont).setFontSize(11));
        Cell headerCell2 = new Cell().add(new Paragraph("SL").setFont(boldFont).setFontSize(11));
        Cell headerCell3 = new Cell().add(new Paragraph("Don gia").setFont(boldFont).setFontSize(11));
        Cell headerCell4 = new Cell().add(new Paragraph("Thanh tien").setFont(boldFont).setFontSize(11));
        
        itemsTable.addHeaderCell(headerCell1);
        itemsTable.addHeaderCell(headerCell2);
        itemsTable.addHeaderCell(headerCell3);
        itemsTable.addHeaderCell(headerCell4);
        
        // Th√™m c√°c m√≥n ƒÉn
        MenuItemDAO menuDAO = new MenuItemDAO();
        double totalAmount = 0;
        
        for (OrderItem item : orderItems) {
            if (item == null) continue;
            
            try {
                MenuItem menuItem = null;
                String itemName = "M√≥n kh√¥ng x√°c ƒë·ªãnh";
                
                // Th·ª≠ l·∫•y t√™n m√≥n t·ª´ database
                try {
                    menuItem = menuDAO.findById(item.getMenuItemId());
                    if (menuItem != null && menuItem.getName() != null) {
                        itemName = menuItem.getName();
                    }
                } catch (Exception e) {
                    System.err.println("Kh√¥ng th·ªÉ load menu item ID " + item.getMenuItemId() + ": " + e.getMessage());
                }
                
                // Fallback: s·ª≠ d·ª•ng display name n·∫øu c√≥
                if (itemName.equals("M√≥n kh√¥ng x√°c ƒë·ªãnh") && item.getDisplayName() != null) {
                    itemName = item.getDisplayName();
                }
                
                Cell nameCell = new Cell().add(new Paragraph(itemName).setFont(font).setFontSize(10));
                Cell qtyCell = new Cell().add(new Paragraph("x" + item.getQuantity()).setFont(font).setFontSize(10));
                Cell priceCell = new Cell().add(new Paragraph(formatCurrency(item.getPrice())).setFont(font).setFontSize(10));
                Cell totalCell = new Cell().add(new Paragraph(formatCurrency(item.getSubtotal())).setFont(font).setFontSize(10));
                
                itemsTable.addCell(nameCell);
                itemsTable.addCell(qtyCell);
                itemsTable.addCell(priceCell);
                itemsTable.addCell(totalCell);
                
                totalAmount += item.getSubtotal();
                
            } catch (Exception e) {
                System.err.println("L·ªói x·ª≠ l√Ω order item: " + e.getMessage());
                e.printStackTrace();
            }
        }
        
        document.add(itemsTable);
        
        // ƒê∆∞·ªùng k·∫ª ngang
        document.add(separator);
        document.add(new Paragraph(" ").setMarginBottom(10));
        
        // T·ªïng c·ªông
        Table totalTable = new Table(UnitValue.createPercentArray(new float[]{2, 1}));
        totalTable.setWidth(UnitValue.createPercentValue(100));
        
        Cell totalLabelCell = new Cell().add(new Paragraph("TONG CONG:").setFont(boldFont).setFontSize(16));
        Cell totalValueCell = new Cell().add(new Paragraph(formatCurrency(totalAmount)).setFont(boldFont).setFontSize(16));
        
        totalTable.addCell(totalLabelCell);
        totalTable.addCell(totalValueCell);
        document.add(totalTable);
        
        // Footer
        document.add(new Paragraph(" ").setMarginTop(30));
        document.add(new Paragraph("Cam on quy khach da su dung dich vu!")
                .setFont(font)
                .setFontSize(12)
                .setTextAlignment(TextAlignment.CENTER)
                .setMarginTop(20));
        
        document.add(new Paragraph("Bar Manager - He thong quan ly quan bar")
                .setFont(font)
                .setFontSize(10)
                .setTextAlignment(TextAlignment.CENTER)
                .setMarginTop(5));
        
        document.close();
    }
    
    /**
     * Format ti·ªÅn t·ªá
     */
    private String formatCurrency(double amount) {
        return currencyFormatter.format(amount) + " VNƒê";
    }
    
    /**
     * Format ti·ªÅn t·ªá cho BigDecimal
     */
    private String formatCurrency(java.math.BigDecimal amount) {
        return currencyFormatter.format(amount) + " VNƒê";
    }
    
    /**
     * T·∫°o font ti·∫øng Vi·ªát v·ªõi fallback
     */
    private PdfFont createVietnameseFont() {
        // Danh s√°ch font ∆∞u ti√™n cho ti·∫øng Vi·ªát
        String[] fontNames = {
            "Arial",           // Windows
            "Helvetica",       // macOS/Linux
            "Liberation Sans", // Linux
            "DejaVu Sans",     // Linux
            "Tahoma",          // Windows
            "Verdana"          // Windows
        };
        
        for (String fontName : fontNames) {
            try {
                return PdfFontFactory.createFont(fontName, "UTF-8");
            } catch (Exception e) {
                // Th·ª≠ font ti·∫øp theo
                continue;
            }
        }
        
        // Fallback: s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        try {
            return PdfFontFactory.createFont();
        } catch (Exception e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o font", e);
        }
    }
    
    /**
     * T·∫°o font bold ti·∫øng Vi·ªát v·ªõi fallback
     */
    private PdfFont createVietnameseBoldFont() {
        // Danh s√°ch font bold ∆∞u ti√™n cho ti·∫øng Vi·ªát
        String[] fontNames = {
            "Arial-Bold",           // Windows
            "Helvetica-Bold",       // macOS/Linux
            "Liberation Sans Bold", // Linux
            "DejaVu Sans Bold",     // Linux
            "Tahoma-Bold",          // Windows
            "Verdana-Bold"          // Windows
        };
        
        for (String fontName : fontNames) {
            try {
                return PdfFontFactory.createFont(fontName, "UTF-8");
            } catch (Exception e) {
                // Th·ª≠ font ti·∫øp theo
                continue;
            }
        }
        
        // Fallback: s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh
        try {
            return PdfFontFactory.createFont();
        } catch (Exception e) {
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o font bold", e);
        }
    }
    
    /**
     * Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i order
     */
    private String getStatusText(String status) {
        switch (status) {
            case "pending": return "Cho xu ly";
            case "completed": return "Da hoan thanh";
            case "paid": return "Da thanh toan";
            default: return status;
        }
    }
}
